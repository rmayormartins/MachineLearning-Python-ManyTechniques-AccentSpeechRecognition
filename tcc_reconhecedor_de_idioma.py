# -*- coding: utf-8 -*-
"""TCC_Reconhecedor_de_idioma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_xHuRY3lQ-rsBp-AdNC-DhzeH4rqjc3
"""

from google.colab import drive

drive.mount('/content/gdrive')

!ls "/content/gdrive/My Drive/Colab Notebooks/"

import pandas as pd
pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/accent-mfcc-data-1.csv')

data = pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/accent-mfcc-data-1.csv')

data.language.value_counts()

from sklearn.preprocessing import LabelEncoder

lb_make = LabelEncoder()
data['language'] = lb_make.fit_transform(data['language'])

data.head(329)

data.shape

data.info

data.hist(edgecolor='black', linewidth=1.2)

from sklearn.model_selection import train_test_split

from sklearn import metrics #for checking the model accugracy

train, test = train_test_split(data, test_size = 0.3)# in this our main data is split into train and test
# the attribute test_size=0.3 splits the data into 70% and 30% ratio. train=70% and test=30%
print(train.shape)
print(test.shape)

data.head(0)

train_X = train[['X1',	'X2',	'X3',	'X4',	'X5',	'X6',	'X7',	'X8',	'X9',	'X10',	'X11',	'X12']]# taking the training data features
train_y=train.pop('language') # output of our training data
test_X= test[['X1',	'X2',	'X3',	'X4',	'X5',	'X6',	'X7',	'X8',	'X9',	'X10',	'X11',	'X12']] # taking test data features
test_y =test.pop('language')  #output value of test data

# import necessary modules
from sklearn import preprocessing
print(preprocessing.normalize(train_X))
print(preprocessing.normalize(test_X))

train_X.hist(edgecolor='black', linewidth=1.2)
test_X.hist(edgecolor='black', linewidth=1.2)

print(train_X)

print(train_y)

from sklearn.neural_network import MLPClassifier
classifier3=MLPClassifier(hidden_layer_sizes=(100,100,100))

classifier3.fit(train_X,train_y)

import matplotlib.pyplot as plt
plt.ylabel('cost')
plt.xlabel('iterations')
plt.title("Learning rate =" + str(0.001))
plt.plot(classifier3.loss_curve_)
plt.show()

predictions3=classifier3.predict(test_X)

from sklearn.metrics import accuracy_score
print(accuracy_score(test_y,predictions3))

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(test_y,predictions3)
print(cm)

import matplotlib.pyplot as plt
plt.matshow(cm)
plt.title('Confusion matrix')
plt.colorbar()
plt.ylabel('True label')
plt.xlabel('Predicted label')
plt.show()